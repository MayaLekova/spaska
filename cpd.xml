<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="51" tokens="304">
<file line="46" path="/home/nikolavp/workspace/fmi_workspace/spaska/src/main/java/spaska/classifiers/DecisionTree.java"/>
<file line="55" path="/home/nikolavp/workspace/fmi_workspace/spaska/src/main/java/spaska/classifiers/OneR.java"/>
<codefragment>
<![CDATA[
	private List<List<Instance>> distribute(List<Instance> instances, List<Condition> conditions) {
		List<List<Instance>> result = new ArrayList<List<Instance>>();
		List<Instance> unknown = new ArrayList<Instance>();
		for (int i = 0; i < conditions.size(); i++) {
			result.add(new ArrayList<Instance>());
		}
		if (conditions.isEmpty()) {
			return result;
		}
		// all conditions test the same attribute
		Condition first = conditions.get(0);
		int attributeIndex = datasetService.getAttributeIndex(first.getAttribute());
		int totalKnown = 0;
		// distribute instances to relevant conditions
		for (Instance instance : instances) {
			int listCounter = 0;
			Value current = instance.getVector().get(attributeIndex);
			for (Condition c : conditions) {
				if (current.getType() == ValueType.Unknown) {
					unknown.add(instance);
					break;
				}
				if (c.ifTrue(current)) {
					result.get(listCounter).add(instance);
					totalKnown++;
					break;
				}
				listCounter++;
			}
		}
		// set portion of instances reaching a condition
		int listCounter = 0;
		for (Condition c : conditions) {
			c.setReach(result.get(listCounter).size() / totalKnown);
			listCounter++;
		}
		// handle unknown
		for (Instance instance : unknown) {
			int counter = 0;
			for (Condition c : conditions) {
				Instance copy = (Instance) instance.clone();
				copy.setWeight(copy.getWeight() * c.getReach());
				result.get(counter).add(copy);
				counter++;
			}
		}
		return result;
	}

	// get index of best nominal attribute (according to information theory)
	private int getBestNominal(NominalInfoService service) {
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="263">
<file line="118" path="/home/nikolavp/workspace/fmi_workspace/spaska/src/main/java/spaska/classifiers/DecisionTree.java"/>
<file line="114" path="/home/nikolavp/workspace/fmi_workspace/spaska/src/main/java/spaska/classifiers/OneR.java"/>
<codefragment>
<![CDATA[
			}
		}
		return index;
	}

	// get a service for the best numeric attribute to split on
	private ContinuousValueService getBestNumeric(List<Instance> list, double classesEntropy) {
		int[] numericIndices = datasetService.getNumericIndices();
		ContinuousValueService best = ContinuousValueService.createEmptyService();
		ContinuousValueService currentService;
		double max = 0, currentRatio;
		for (int i = 0; i < numericIndices.length; i++) {
			currentService = new ContinuousValueService(datasetService, list, numericIndices[i], classesEntropy);
			currentRatio = currentService.getGainRatio();
			if (max < currentRatio) {
				max = currentRatio;
				best = currentService;
			}
		}
		return best;
	}

	// get conditions (nodes in the tree) for a nominal attribute
	private List<Condition> getNominalConditions(int attributeIndex, Value majorityClass) {
		List<Condition> children = new ArrayList<Condition>();
		Attribute a = datasetService.getAttribute(attributeIndex);
		for (Value val : datasetService.getAttributeDomain(attributeIndex)) {
			children.add(new Condition(a, val, Sign.EQ, majorityClass));
		}
		return children;
	}

	// get conditions for a numeric attribute (binary split point)
	private List<Condition> getNumericConditions(int attributeIndex, double splitValue, Value majorityClass) {
		List<Condition> children = new ArrayList<Condition>();
		Attribute a = datasetService.getAttribute(attributeIndex);
		Value doubleValue = new NumericValue(splitValue);
		children.add(new Condition(a, doubleValue, Sign.LTE, majorityClass));
		children.add(new Condition(a, doubleValue, Sign.GT, majorityClass));
		return children;
	}

	// get children of the current node
	private List<Condition> getConditions(List<Instance> list) {
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="149">
<file line="119" path="/home/nikolavp/workspace/fmi_workspace/spaska/src/main/java/spaska/gui/ClassifyTab.java"/>
<file line="110" path="/home/nikolavp/workspace/fmi_workspace/spaska/src/main/java/spaska/gui/ClustererTab.java"/>
<codefragment>
<![CDATA[
			stop();
		}
	}

	private <T> void setEngineArgs(Map<Class<? extends T>, Map<String, String>> classToParameters) throws Exception {
		for (Entry<Class<? extends T>, Map<String, String>> entry : classToParameters.entrySet()) {
			Class<? extends T> cls = entry.getKey();
			Map<String, String> params = (entry.getValue() != null) ? entry.getValue() : Utils.getParamsOfClass(cls);

			System.out.println("Set " + cls + " with " + params);
			if (Validator.class.isAssignableFrom(cls)) {
				getEngine().addValidator((Validator) cls.newInstance(), params);
			}
			else if (IClusterer.class.isAssignableFrom(cls)) {
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="131">
<file line="123" path="/home/nikolavp/workspace/fmi_workspace/spaska/src/main/java/spaska/gui/ClassifyTab.java"/>
<file line="130" path="/home/nikolavp/workspace/fmi_workspace/spaska/src/main/java/spaska/gui/CompareTab.java"/>
<codefragment>
<![CDATA[
	private <T> void setEngineArgs(Map<Class<? extends T>, Map<String, String>> classToParameters, boolean first) throws Exception {
		for (Entry<Class<? extends T>, Map<String, String>> entry : classToParameters.entrySet()) {
			Class<? extends T> cls = entry.getKey();
			Map<String, String> params = (entry.getValue() != null) ? entry.getValue() : Utils.getParamsOfClass(cls);

			System.out.println("Set " + cls + " with " + params);
			if (Validator.class.isAssignableFrom(cls)) {
				getEngine().addValidator((Validator) cls.newInstance(), params);
			}
			else if (IClassifier.class.isAssignableFrom(cls)) {
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="121">
<file line="114" path="/home/nikolavp/workspace/fmi_workspace/spaska/src/main/java/spaska/gui/ClustererTab.java"/>
<file line="130" path="/home/nikolavp/workspace/fmi_workspace/spaska/src/main/java/spaska/gui/CompareTab.java"/>
<codefragment>
<![CDATA[
	private <T> void setEngineArgs(Map<Class<? extends T>, Map<String, String>> classToParameters, boolean first) throws Exception {
		for (Entry<Class<? extends T>, Map<String, String>> entry : classToParameters.entrySet()) {
			Class<? extends T> cls = entry.getKey();
			Map<String, String> params = (entry.getValue() != null) ? entry.getValue() : Utils.getParamsOfClass(cls);

			System.out.println("Set " + cls + " with " + params);
			if (Validator.class.isAssignableFrom(cls)) {
				getEngine().addValidator((Validator) cls.newInstance(), params);
			}
			else if (IClassifier.class.isAssignableFrom(cls)) {
]]>
</codefragment>
</duplication>
</pmd-cpd>